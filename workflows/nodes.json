{
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        3760,
        4016
      ],
      "id": "3b52c29b-30bf-4f92-b0df-dfc197841ce5",
      "name": "Merge"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload",
        "options": {}
      },
      "id": "2080741e-4b84-4077-894e-70fc8ae56341",
      "name": "Server webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        2944,
        3712
      ],
      "webhookId": "upload-test"
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for Gemini API\nconst binaryData = items[0].binary.file.data;\nconst userEmail = items[0].json.body.userEmail;\nconst fileName = items[0].binary.file.fileName\nconst mimeType = items[0].json.mimeType;\n\nconst base64Data = binaryData;\n\nreturn [{\n  json: {\n    file: base64Data,\n    filename: fileName,\n    userEmail: userEmail,\n    mimeType: mimeType\n  },\n  binary: {\n    file: items[0].binary.file\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3136,
        3712
      ],
      "id": "a5478670-4274-4993-b4df-8a4299f9ddda",
      "name": "Process File Data"
    },
    {
      "parameters": {
        "resource": "document",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash"
        },
        "text": "You are an expert AI academic assistant. Your sole purpose is to analyze the provided assignment content and generate answers formatted in a single, raw HTML file.\n\n**Primary Directive: Output Format**\nYour entire response MUST be only raw HTML code.\n* The response **MUST** begin immediately with `<!DOCTYPE html>`.\n* There must be **ABSOLUTELY NO** other text, explanations, or markdown formatting like ` ```html ` before or after the HTML block.\n* The HTML should be self-contained, using internal CSS for professional styling, a main title, and clear headings for each answer.\n\n---\n**NEW HTML HEAD DIRECTIVE** In the `<head>` section of the generated HTML, you **MUST** include the MathJax library to properly render LaTeX equations. Add the following two script tags exactly as shown:\n\n<script>\nMathJax = {\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']],\n    displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']]\n  }\n};\n</script>\n<script id=\"MathJax-script\" async src=\"[https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js](https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js)\"></script>\n\n---\n\n**Secondary Directive: Subject-Specific Rules**\nFor each question in the assignment, you must identify the subject and apply the corresponding rules below with absolute precision.\n\n## For Mathematics Questions:\n* Provide a complete, step-by-step solution for each problem.\n* **NEVER** skip any logical or computational steps. Show all intermediate calculations and derivations clearly.\n* **DO NOT** approximate or jump directly to the final answer. The entire process of reaching the solution must be documented.\n* Use LaTeX, enclosed in `$` for inline math and `$$` for block equations, for all mathematical symbols, variables, and formulas.\n\n## For Java Programming Questions:\n* Provide the complete, compilable Java program as the answer.\n* The code **MUST NOT** contain any comments.\n* Use descriptive, human-like variable names (e.g., `studentFirstName`, `itemCounter`, `maxHeight` instead of `s`, `i`, `m`).\n* Only implement the exact functionality requested in the problem. **DO NOT** add extra features or methods not specified.\n\n## For Data Structures and Algorithms (DSA) Questions:\n* The programming language for all DSA solutions **MUST be C only**. Never use C++, Java, or any other language.\n* Each answer must have two distinct, clearly labeled parts:\n    1.  **Algorithm**: Write a clear, step-by-step algorithm or pseudocode. **This section MUST have comments** explaining the logic of each step (e.g., what a loop is doing, the purpose of a condition).\n    2.  **C Program**: Provide the complete C program that directly implements the described algorithm. This code should **NOT** have comments.\n* In the C program, use descriptive, human-like variable names.\n* The program's logic must be simple and directly follow the algorithm's steps. Avoid complex, one-line operations.\n\n---\n**Begin Assignment Analysis**\n\nNow, process the assignment content below and generate the response strictly following all directives listed above.\n\n",
        "inputType": "binary",
        "binaryPropertyName": "file",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        3312,
        3712
      ],
      "id": "d1cf776f-fb5c-4b22-bfca-684db746cce7",
      "name": "Analyze with Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "MVkdTvD2YX3cyJeD",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract the actual HTML from Gemini response\nlet htmlContent = '';\n\n// --- Existing logic to find the text response ---\nif (\n  items[0].json.content &&\n  items[0].json.content.parts &&\n  items[0].json.content.parts.length > 0 &&\n  items[0].json.content.parts[0].text\n) {\n  htmlContent = items[0].json.content.parts[0].text;\n} else if (\n  items[0].json.candidates &&\n  items[0].json.candidates[0].content &&\n  items[0].json.candidates[0].content.parts[0].text\n) {\n  htmlContent = items[0].json.candidates[0].content.parts[0].text;\n} else {\n  // Fallback for debugging if structure is unexpected\n  htmlContent = JSON.stringify(items[0].json, null, 2);\n}\n\n\n// --- NEW CODE TO CLEAN THE RESPONSE ---\n// This regular expression finds and removes the starting ```html and the closing ```.\n// It also handles surrounding whitespace and newlines, making it robust.\nconst cleanedHtml = htmlContent.replace(/^`{3}(?:html)?\\s*|\\s*`{3}$/g, '').trim();\n\n\n// --- Return the cleaned data ---\nreturn [\n  {\n    json: {\n      html: cleanedHtml, // Use the cleaned variable here\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3536,
        3712
      ],
      "id": "5ac09164-a8a1-4eef-9ec2-29618b165c2e",
      "name": "Clean HTML"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.pdfshift.io/v3/convert/pdf",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=source",
              "value": "={{$json[\"html\"]}}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3824,
        3712
      ],
      "id": "f3aee5e0-2dc2-404b-8652-558c4fda7098",
      "name": "PDFShift API",
      "credentials": {
        "httpBasicAuth": {
          "id": "20XQfvD5zr9IICxU",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get values from current json (or upstream if needed)\nconst current = items[0].json;\n\nconst userEmail = current.userEmail || 'default@example.com';\n\n// Pass these to next node\nreturn [{\n  json: {\n    userEmail: userEmail,\n  },\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3216,
        4032
      ],
      "id": "c8d2d881-a24d-46e7-9e1d-f6316d6a8a8b",
      "name": "user email"
    },
    {
      "parameters": {
        "jsCode": "const html = items[0].json.html || '';\nconst userEmail = items[1].json.userEmail || '';\n\nreturn [{\n  json: {\n    html: html,\n    userEmail: userEmail\n  },\n  binary: items[0].binary // keep binary from PDFShift\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4032,
        4016
      ],
      "id": "60c18060-434b-4d44-8a77-af6765993d5f",
      "name": "Final Ouputs"
    },
    {
      "parameters": {
        "fromEmail": "losndfoun@gmail.com",
        "toEmail": "={{ $json[\"userEmail\"] }}",
        "subject": "={{ \"Processed Assignment: Ready for Download!!\"}}",
        "html": "=",
        "attachments": "data",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "id": "7e3b56c3-e188-4d4e-9ef4-b04ed24fdaf6",
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        4256,
        4016
      ],
      "credentials": {
        "smtp": {
          "id": "LTKGvE1DYXfHKSvD",
          "name": "SMTP account"
        }
      }
    }
  ],
  "connections": {
    "Merge": {
      "main": [
        [
          {
            "node": "Final Ouputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Server webhook": {
      "main": [
        [
          {
            "node": "Process File Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process File Data": {
      "main": [
        [
          {
            "node": "Analyze with Gemini",
            "type": "main",
            "index": 0
          },
          {
            "node": "user email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze with Gemini": {
      "main": [
        [
          {
            "node": "Clean HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean HTML": {
      "main": [
        [
          {
            "node": "PDFShift API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDFShift API": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "user email": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Final Ouputs": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        []
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3bb4d6d8b1ec391588937b6c2321c3498f9da517bdc068d5f874d956c90c0a0c"
  }
}